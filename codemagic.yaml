###############################################################################
# Codemagic 基础配置
###############################################################################
workflows:
  ios-simulator-build:  # 工作流名称
    name: "[iOS] 模拟器构建测试"  # 在UI中显示的名称
    environment:
      vars:  # 全局环境变量
        PROJECT_ROOT: "Front/Plataforma Gestio-n Distribucio-n  Mayorista/iosApp"  # 项目根路径（必须用引号包裹含空格路径）
        XCODE_SCHEME: "iosApp"  # Xcode scheme名称（通常与项目名一致）
        SIMULATOR_DEVICE: "iPhone 15"  # 使用的模拟器型号
        SIMULATOR_OS: "iOS 17.0"  # 模拟器系统版本

      # 开发环境配置
      xcode: latest  # 使用最新Xcode版本
      cocoapods: default  # CocoaPods依赖管理

###############################################################################
# 触发条件配置
###############################################################################
    triggering:
      events:  # 触发事件
        - push  # 代码推送触发
      
      branch_patterns:  # 分支匹配规则
        - pattern: "main"  # 监听main分支
          include: true  # 包含匹配
          source: true   # 跟踪分支来源

###############################################################################
# 构建脚本流程
###############################################################################
    scripts:
      # 阶段1 - 环境准备
      - name: "[1/3] 环境初始化"
        script: |
          # 处理含空格路径（关键步骤）
          cd "$PROJECT_ROOT"
          pwd  # 打印当前路径用于验证

      # 阶段2 - 依赖安装
      - name: "[2/3] 安装依赖"
        script: |
          # 检查Podfile是否存在
          if [ -f "Podfile" ]; then
            echo "正在安装CocoaPods依赖..."
            pod install --repo-update
          else
            echo "未找到Podfile，跳过依赖安装"
          fi

      # 阶段3 - 构建执行
      - name: "[3/3] 模拟器构建"
        script: |
          xcodebuild clean build \
          -project "iosApp.xcodeproj" \
          -scheme "$XCODE_SCHEME" \
          -sdk iphonesimulator \
          -destination "platform=iOS Simulator,name=$SIMULATOR_DEVICE,OS=$SIMULATOR_OS" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGN_ENTITLEMENTS="" \
          CODE_SIGNING_ALLOWED="NO" \
          | xcpretty

###############################################################################
# 产物配置
###############################################################################
    artifacts:
      - $PROJECT_ROOT/build/**/*.app  # 收集生成的.app文件

###############################################################################
# 发布配置
###############################################################################
    publishing:
      email:
        recipients:  # 通知邮箱
          - your-team@example.com  # 替换为实际邮箱
      scripts:
        - name: "构建结果通知"
          script: |
            echo "✅ iOS模拟器构建成功！"
            echo "生成的.app文件路径：$PROJECT_ROOT/build"

###############################################################################
# 进阶配置建议（需开发者账号）
###############################################################################
# code_signing:
#   ios_signing:
#     team_id: YOUR_TEAM_ID  # 10位团队ID（登录developer.apple.com查看）
#     code_sign_identity: "Apple Development"  # 证书类型
#     provisioning_profile_specifier: "pgdm-dev-profile"  # 描述文件名称
#
# 真机构建示例：
# xcodebuild archive \
#   -scheme "$XCODE_SCHEME" \
#   -archivePath build/iosApp.xcarchive \
#   -allowProvisioningUpdates \
#   -destination generic/platform=iOS